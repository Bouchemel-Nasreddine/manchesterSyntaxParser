grammar OWL2Manchester;

// lexer rules
fragment LETTER: [a-zA-Z];
fragment DIGIT: [0-9];

// Identifier rule
ID: LETTER (LETTER | DIGIT)*;

//data Types
BOOLEAN: 'true' | 'false'; 
INT: [0-9]+;
STRING: '"' ~["]* '"';
value: BOOLEAN | STRING | ID;

//connectors
KW_AND: 'and';
KW_OR: 'or';
KW_NOT: 'not';
KW_SOME: 'some';
KW_ONLY: 'only';
KW_MIN: 'min';
KW_MAX: 'max';
KW_EXACTLY: 'exactly';

//axiom Keywords
//KW_CLASS: 

//ClassExpression
//    : 'Class(' ID ')'
//    | 'ObjectSomeValuesFrom(' propertyID ClassExpression ')'
//    | 'ObjectAllValuesFrom(' propertyID ClassExpression ')'
//    | 'ObjectIntersectionOf(' ClassExpression (',' ClassExpression)+ ')'
//    | 'ObjectUnionOf(' ClassExpression (',' ClassExpression)+ ')'
//    | 'ObjectComplementOf(' ClassExpression ')'
//    ;

classExpression
               : ID
               |'(' classExpression ')'                             // Parenthesized expression
               | classExpression KW_AND classExpression?                       // Atomic class or conjunction
               | classExpression KW_OR classExpression?
               | classExpression KW_SOME classExpression?            // Existential quantification
               | classExpression KW_ONLY classExpression?         // Universal quantification
               | classExpression KW_MIN INT classExpression  // Minimum cardinality restriction
               | classExpression KW_MAX INT classExpression?  // Maximum cardinality restriction
               | classExpression KW_EXACTLY INT classExpression?  // Exact cardinality restriction
               ;

// Define other lexer rules and parser rules as needed

// Error handling for lexer errors
lexerError : . ;

// Error handling for parser errors
parserError : . ;



// Entry point
axiom: ( classExpression ) +;